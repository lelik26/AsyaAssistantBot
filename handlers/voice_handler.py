# handlers/voice_handler.py
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from utils.logger import setup_logger
import config as cfg
from services.voices import VoicesService, VoicesError
from utils.file_utils import ensure_directory, get_abs_path

logger = setup_logger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_VOICE_SELECTION, WAITING_FOR_TEXT_INPUT = range(2)

class VoiceHandlers:
    """Handles text-to-speech operations using OpenAI TTS."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."""
        self.voice_service = VoicesService()
        self.voices = cfg.VOICES_GPT

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /voice."""
        return [ConversationHandler(
            entry_points=[CommandHandler("voice", self.choose_voice)],
            states={
                WAITING_FOR_VOICE_SELECTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.voice_selected),
                    CommandHandler("cancel", self.cancel_voice)
                ],
                WAITING_FOR_TEXT_INPUT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_voice),
                    CommandHandler("cancel", self.cancel_voice)
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_voice)]
        )]

    def create_voice_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞.
        Returns:
            ReplyKeyboardMarkup: Keyboard for voice selection."""

        buttons = [[name] for name in self.voices.keys()]
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

    async def choose_voice(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /voice –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞.
        Prompts the user to choose a voice for TTS.

        Args:
            update (Update): Telegram update.
            context (CallbackContext): Telegram context."""

        keyboard = self.create_voice_keyboard()
        await update.message.reply_text("üéô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)
        return WAITING_FOR_VOICE_SELECTION

    async def voice_selected(self, update: Update, context: CallbackContext):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.
        Args:
            update (Update): Telegram update.
            context (CallbackContext): Telegram context."""

        selected_voice = update.message.text
        if selected_voice in self.voices:
            context.user_data["selected_voice"] = selected_voice  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
            await update.message.reply_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å: üîä {selected_voice}.\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∫–æ–º–∞–Ω–¥.",
                reply_markup=ReplyKeyboardRemove()
            )
            return WAITING_FOR_TEXT_INPUT
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            return WAITING_FOR_VOICE_SELECTION

    async def generate_voice(self, update: Update, context: CallbackContext):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        Args:
            update (Update): Telegram update.
            context (CallbackContext): Telegram context."""

        selected_voice = context.user_data.get("selected_voice")
        if not selected_voice:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /voice.")
            return WAITING_FOR_VOICE_SELECTION

        text = update.message.text

        try:
            voice_id = self.voices.get(selected_voice)
            if voice_id is None:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return WAITING_FOR_VOICE_SELECTION

            await update.message.reply_text(f"‚åõÔ∏è–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è... ")

            # –ü–∞–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
            audio_dir = get_abs_path("static/audio_file")
            ensure_directory(audio_dir)

            audio_file_path = os.path.join(audio_dir, f"{update.message.message_id}.mp3")

            # audio_file = self.voice_service.generate_audio(text, voice_id)
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            self.voice_service.generate_audio(text, voice_id, audio_file_path)

            with open(audio_file_path, "rb") as audio:
                await update.message.reply_audio(audio=audio)
            logger.info(f"–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}.")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.remove(audio_file_path)
            logger.info(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª {audio_file_path} —É–¥–∞–ª—ë–Ω.")

            await update.message.reply_text(
                "üí°–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /voice. \n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–µ—Ä–∏—Ç–µ /start –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END

        except VoicesError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return WAITING_FOR_TEXT_INPUT

    async def cancel_voice(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è."""
        await update.message.reply_text(
            "‚ùå –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. \n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /voice –∏–ª–∏ /start ,–ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
