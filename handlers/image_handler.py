# handlers/image_handler.py
import asyncio
import logging

from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from utils.logger import setup_logger
from telegram.error import TimedOut
from services.image_generator import ImageGenerator,ImageGenerationError

logger = setup_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
WAITING_FOR_IMAGE_DESCRIPTION = 1

class ImageHandler:
    """Handles image generation requests using OpenAI image API."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        self.image_generator = ImageGenerator()

    def get_handler(self):
        """Returns a ConversationHandler for /image command."""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("image", self.start_image_generation)],
            states={
                WAITING_FOR_IMAGE_DESCRIPTION: [
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_image_response),
                    MessageHandler(filters.COMMAND, self.cancel_generate_image)

                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_generate_image)],
        )
        return conv_handler

    async def start_image_generation(self, update: Update, context: CallbackContext) -> int:
        """Prompts the user to enter an image description.

               Args:
                   update (Update): Telegram update.
                   context (CallbackContext): Telegram context.

               Returns:
                   int: Next conversation state.
               """
        await update.message.reply_text("üñº –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:")
        return WAITING_FOR_IMAGE_DESCRIPTION

    async def generate_image_response(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
         Args:
            update (Update): Telegram update.
            context (CallbackContext): Telegram context.

        Returns:
            int: Conversation end state.
        """
        prompt = update.message.text
        await update.message.reply_text(f"üñº –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è:\n{prompt}")
        try:
            image_url = self.image_generator.generate_image(prompt)
            await update.message.reply_photo(photo=image_url, caption="üñº –í–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}.")
        except ImageGenerationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {update.effective_user.id}: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return WAITING_FOR_IMAGE_DESCRIPTION#ConversationHandler.END

    async def cancel_generate_image(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        try:
            await update.message.reply_text(
                "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                "üîö –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /image –∏–ª–∏ /start ,–ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ "
            )
        except TimedOut:
            logging.error("–û—à–∏–±–∫–∞: Telegram API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")
            await asyncio.sleep(2)  # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            try:
                await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞–¥–µ—Ä–∂–∫–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        return ConversationHandler.END
