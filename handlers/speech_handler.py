# handlers/speech_handler.py
import os
import asyncio
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from utils.logger import setup_logger
from utils.file_utils import ensure_directory, get_abs_path
from services.speech_to_text import SpeechToTextService, SpeechToTextError
from pydub import AudioSegment
import config as cfg

# –£–∫–∞–∑—ã–≤–∞–µ–º `pydub`, –≥–¥–µ –∏—Å–∫–∞—Ç—å ffmpeg –∏ ffprobe
AudioSegment.converter = cfg.FFMPEG_PATH
AudioSegment.ffprobe = cfg.FFPROBE_PATH
AudioSegment.ffmpeg = cfg.FFMPEG_PATH


logger = setup_logger(__name__)

MAX_FILE_SIZE = 25 * 1024 * 1024  # 25 MB
MAX_DURATION = 5400 # –º–∞–∫—Å–∏–º—É–º 5400 —Å–µ–∫—É–Ω–¥ (90 –º–∏–Ω—É—Ç)
WAITING_FOR_VOICE = 1

def get_audio_duration(file_path: str) -> float:
    """Returns the duration of an audio file in seconds.

    Args:
        file_path (str): Path to the audio file.

    Returns:
        float: Duration in seconds.
    """
    audio = AudioSegment.from_file(file_path)
    return len(audio) / 1000

class SpeechHandler:
    """Handles speech recognition using OpenAI Whisper API."""

    def __init__(self):
        self.speech_service = SpeechToTextService()

    def get_handler(self):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("speech", self.start_speech)],
            states={
                WAITING_FOR_VOICE: [
                    MessageHandler(filters.VOICE | filters.AUDIO, self.process_speech),
                    MessageHandler(filters.COMMAND, self.cancel_speech)
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_speech)]
        )
        return conv_handler

    async def start_speech(self, update: Update, context: CallbackContext) -> int:
        """Prompts the user to send an audio message for transcription.

               Args:
                   update (Update): Telegram update.
                   context (CallbackContext): Telegram context.

               Returns:
                   int: Next conversation state.
               """
        await update.message.reply_text("üéô –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä—É—é.")
        return WAITING_FOR_VOICE

    async def process_speech(self, update: Update, context: CallbackContext) -> int:
        """Processes the received audio, checks duration, transcribes and sends the result.

                Args:
                    update (Update): Telegram update.
                    context (CallbackContext): Telegram context.

                Returns:
                    int: Conversation end state.
                """

        audio_obj = None
        expected_extension = "ogg"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        if update.message.voice:
            audio_obj = update.message.voice
            expected_extension = "ogg"
        elif update.message.audio:
            audio_obj = update.message.audio
            allowed_mime_types = {
                "audio/mpeg", "audio/mp3", "audio/mp4", "audio/ogg",
                "audio/webm", "audio/m4a", "audio/wav", "audio/mpga"
            }
            if audio_obj.mime_type not in allowed_mime_types:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp3, ogg –∏–ª–∏ wav."
                )
                return WAITING_FOR_VOICE
            if "mpeg" in audio_obj.mime_type or "mp3" in audio_obj.mime_type:
                expected_extension = "mp3"
            else:
                expected_extension = "ogg"
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return WAITING_FOR_VOICE

        if audio_obj.file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–±–æ–ª–µ–µ 25 MB). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
            )
            return WAITING_FOR_VOICE

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
        audio_dir = get_abs_path("static/audio_file")
        ensure_directory(audio_dir)
        audio_file_path = os.path.join(audio_dir, f"{audio_obj.file_id}.{expected_extension}")


        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
            audio_obj = await audio_obj.get_file()
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await audio_obj.download_to_drive(audio_file_path)
            logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤: {audio_file_path}")

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            status_msg = await update.message.reply_text("‚åõÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            await asyncio.sleep(25)


            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏
            if not os.path.exists(audio_file_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {audio_file_path}")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
                return WAITING_FOR_VOICE

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –Ω–µ –±–æ–ª–µ–µ 90 –º–∏–Ω—É—Ç
            duration = get_audio_duration(audio_file_path)
            if duration > MAX_DURATION:
                await update.message.reply_text(
                    f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({duration:.1f} —Å–µ–∫.). –ú–∞–∫—Å–∏–º—É–º {MAX_DURATION} —Å–µ–∫.")
                return WAITING_FOR_VOICE


            recognized_text = self.speech_service.transcribe_audio(audio_file_path)
            await status_msg.edit_text("‚úÖ –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{recognized_text}")
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}.")

            text_dir = get_abs_path("static/recognized_text_file")
            ensure_directory(text_dir)
            text_file_path = os.path.join(text_dir, f"{audio_obj.file_id}.txt")
            with open(text_file_path, "w", encoding="utf-8") as f:
                f.write(recognized_text)
            #
            # with open(text_file_path, "rb") as doc:
            #     await update.message.reply_document(document=doc, filename=f"{audio_obj.file_id}.txt")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            os.remove(audio_file_path)
            os.remove(text_file_path)
            logger.info(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª {audio_file_path} –∏ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {text_file_path} —É–¥–∞–ª—ë–Ω—ã.")

        except SpeechToTextError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —É {update.effective_user.id}: {str(e)}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {str(e)}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        return WAITING_FOR_VOICE

    async def cancel_speech(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.Cancels the conversation.

               Args:
                   update (Update): Telegram update.
                   context (CallbackContext): Telegram context.

               Returns:
                   int: Conversation end state.
               """
        await update.message.reply_text("üîö –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. \n"
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /speech –∏–ª–∏ /start ,–ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ ")
        return ConversationHandler.END
