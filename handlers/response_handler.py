# handlers/response_handler.py
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from utils.logger import setup_logger
from services.response_from_assistant import ResponseAssistantAll, ResponseAssistantError

logger = setup_logger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_MESSAGE = 1

class ResponseHandler:
    """Handles conversation with the AI for text generation."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—â–µ–Ω–∏—è —Å AI."""
        self.response_service = ResponseAssistantAll()

    def get_handler(self):
        """Returns a ConversationHandler for /talk command."""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("talk", self.start_talking)],
            states={
                WAITING_FOR_MESSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_response),
                    MessageHandler(filters.COMMAND, self.cancel_talk)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_talk)]
        )
        return conv_handler

    async def start_talking(self, update: Update, context: CallbackContext):
        """Starts the conversation by asking the user to send a message.
               Args:
                   update (Update): Telegram update.
                   context (CallbackContext): Telegram context.

               Returns:
                   int: Next conversation state.
               """
        await update.message.reply_text("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!")
        return WAITING_FOR_MESSAGE

    async def generate_response(self, update: Update, context: CallbackContext):
        """Generates a response from the AI based on user input.

               Args:
                   update (Update): Telegram update.
                   context (CallbackContext): Telegram context.

               Returns:
                   int: Conversation end state.
               """
        user_message = update.message.text
        try:
            response = await self.response_service.text_generation(update, context, user_message)

            await update.message.reply_text(response, parse_mode="Markdown")
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}.")
        except ResponseAssistantError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {update.effective_user.id}: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return WAITING_FOR_MESSAGE #ConversationHandler.END

    async def cancel_talk(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.Cancels the conversation.

               Args:
                   update (Update): Telegram update.
                   context (CallbackContext): Telegram context.

               Returns:
                   int: Conversation end state.
               """
        await update.message.reply_text("üîö –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. \n"
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /talk –∏–ª–∏ /start ,–ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ ")
        return ConversationHandler.END

