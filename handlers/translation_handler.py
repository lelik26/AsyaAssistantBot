# handlers/translation_handler.py
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from utils.logger import setup_logger
from services.translator import DeepLTranslator, TranslationError
import config as cfg

logger = setup_logger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è ConversationHandler
SELECT_LANGUAGE, GET_TEXT = range(2)

class TranslationHandlers:
    """Handles text translation using DeepL API."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞."""
        self.translator = DeepLTranslator()

    def get_conversation_handler(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /translate."""
        return ConversationHandler(
            entry_points=[CommandHandler("translate", self.start_translation)],
            states={
                SELECT_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_language)],
                GET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_text),
                           MessageHandler(filters.COMMAND, self.cancel)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )

    async def start_translation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.

        Args:
            update (Update): Telegram update.
            context (ContextTypes.DEFAULT_TYPE): Telegram context.

        Returns:
            int: Next conversation state.
        """
        keyboard = [[key] for key in cfg.SUPPORTED_LANGUAGES_FREE.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=reply_markup)
        return SELECT_LANGUAGE

    async def select_language(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —è–∑—ã–∫.

        Args:
            update (Update): Telegram update.
            context (ContextTypes.DEFAULT_TYPE): Telegram context.

        Returns:
            int: Next conversation state.
        """
        selected_language = update.message.text
        if selected_language not in cfg.SUPPORTED_LANGUAGES_FREE:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            return SELECT_LANGUAGE
        context.user_data["target_lang"] = cfg.SUPPORTED_LANGUAGES_FREE[selected_language]
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
        return GET_TEXT

    async def get_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥.
        Args:
            update (Update): Telegram update.
            context (ContextTypes.DEFAULT_TYPE): Telegram context.

        Returns:
            int: Conversation end state.
        """
        text_to_translate = update.message.text
        target_lang = context.user_data["target_lang"]
        await update.message.reply_text(f"üîÑ –ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç –Ω–∞\n{target_lang}: ")
        try:

            translated_text = self.translator.translate(text_to_translate, target_lang)
            await update.message.reply_text(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang}:\n\n{translated_text}")
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {str(e)}")
            await update.message.reply_text("‚ùåüòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return GET_TEXT#ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞.
        Args:
            update (Update): Telegram update.
            context (ContextTypes.DEFAULT_TYPE): Telegram context.

        Returns:
            int: Conversation end state."""
        await update.message.reply_text("‚ùåüò± –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.\n"
                                        "üîö –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n"
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /translate –∏–ª–∏ /start ,–ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ ", reply_markup=ReplyKeyboardRemove())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –ø–µ—Ä–µ–≤–æ–¥.")
        return ConversationHandler.END

