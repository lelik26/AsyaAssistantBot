# tests/test_response_from_assistant.py
import unittest
from unittest.mock import patch
from services.response_from_assistant import ResponseAssistantAll, ResponseAssistantError

class TestResponseAssistantAll(unittest.TestCase):
    def setUp(self):
        self.assistant = ResponseAssistantAll()

    @patch("services.response_from_assistant.openai.chat.completions.create")
    def test_text_generation_success(self, mock_create):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        mock_create.return_value.choices = [{"message": {"content": "Hello, how can I help you?"}}]
        mock_create.return_value.usage = {"prompt_tokens": 10, "completion_tokens": 20, "total_tokens": 30}
        result = self.assistant.text_generation(None, None, "Hello", model="gpt-4o")
        self.assertIn("Hello, how can I help you?", result)
        self.assertIn("üì• –í—Ö–æ–¥—è—â–∏–µ: 10", result)
        self.assertIn("üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ: 20", result)
        self.assertIn("üí∞ –í—Å–µ–≥–æ: 30", result)

    @patch("services.response_from_assistant.openai.chat.completions.create")
    def test_text_generation_api_error(self, mock_create):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."""
        mock_create.side_effect = Exception("API Error")
        with self.assertRaises(ResponseAssistantError):
            self.assistant.text_generation(None, None, "What is AI?", model="gpt-4o")

    def test_invalid_model(self):
        """–¢–µ—Å—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏."""
        with self.assertRaises(ValueError):
            self.assistant.text_generation(None, None, "Tell me a joke", model="invalid-model")

    def test_long_message(self):
        """–¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª–µ–µ 16000 —Å–∏–º–≤–æ–ª–æ–≤)."""
        long_text = "A" * 16001
        with self.assertRaises(ValueError):
            self.assistant.text_generation(None, None, long_text, model="gpt-4o")

if __name__ == "__main__":
    unittest.main()
